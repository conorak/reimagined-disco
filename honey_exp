import numpy as np
import math

#Honeycomb lattice

n = 3 #n = 1 is a primitive cell
L = int(4*n-1) #number of rows 
N = int(6*(n**2)) #number of nodes
middle = int(math.floor((L/2)+1)) #middle row
grid = int(5+6*(n-1))

#initialize the lattice
latt = np.zeros((L,grid))
label = 1

for i in range(L-n):
    #------------------------------
    #---Do top and bottom layers---
    #------------------------------
    if i<n:
        startat = int(math.floor(grid/2)-3*i-1)
        endat = int(math.floor(grid/2)+3*(i+1)-1)
        if i<n: #number of "doubles"
            times = i+1
        else:
            times=L-i+1
        x = 0
        for k in range(times): #layer 0 has 1 "double", layer 2 has 2 "doubles", etc.
            latt[i][startat+x] = label
            latt[L-i-1][grid-startat-x-1] = N-label+1
            label = label+1

            latt[i][startat+x+2] = label
            latt[L-i-1][grid-startat-x-3] = N-label+1
            label = label+1
            x = x+6
    #--------------------------------
    #---Top and bottom layers done---
    #--------------------------------

    #--------------------------------------------------
    #--Now, do even rows if n even, odd rows if n odd--
    #--------------------------------------------------
    elif (i%2==0 and n%2==0) or (i%2!=0 and n%2!=0):
        #manually assign first
        latt[i][0] = label
        label = label+1
        x = 0
        for k in range(n-1):
            latt[i][4+x] = label
            label = label+1

            latt[i][6+x] = label
            label = label+1
            x = x+6
        #manually assign second
        latt[i][4+x] = label
        label = label+1
    #------------------------------------------------
    #--Odd rows where n even, even rows where n odd--
    #------------------------------------------------
    else:
        x = 0
        for k in range(n):
            latt[i][1+x] = label
            label = label+1

            latt[i][3+x] = label
            label = label+1
            x = x+6
#===============
#===Bond list===
#===============
bonds = np.zeros((1,2))
#---------------
#--Right bonds--
#---------------
for i in range(L): #not on edge
    for j in range(grid-2):
        if latt[i][j]!=0:
            if latt[i][j+2]!=0:
                bonds = np.vstack((bonds,[latt[i][j],latt[i][j+2]]))
for i in range(L): #on edges
    if (i<n and i!=0) or (i>L-n-1 and i!=L-1):
        if i<n:
            endat = int(math.floor(grid/2)+3*(i+1)-1)
            startat = int(math.floor(grid/2)-3*i-1)
        else:
            endat = int(math.floor(grid/2)+3*(L-i)-1)
            startat = int(math.floor(grid/2)-3*(L-i-1)-1)	
        bonds = np.vstack((bonds, [latt[i][endat-1], latt[i][startat]]))
#---------------
#--Lower bonds--
#---------------
for i in range(L-1):
    for j in range(grid):
        if latt[i][j]!=0:
            if j!=grid-1:
                if latt[i+1][j+1]!=0:
                    bonds = np.vstack((bonds, [latt[i][j], latt[i+1][j+1]]))
                elif latt[i+1][j-1]!=0:
                    bonds = np.vstack((bonds, [latt[i][j], latt[i+1][j-1]]))
            elif latt[i+1][j-1]!=0:
                bonds = np.vstack((bonds, [latt[i][j], latt[i+1][j-1]]))
#-------------------------
#--Remaining upper bonds--
#-------------------------
for i in range(0,n):
    startat = int(math.floor(grid/2)-3*i-1)
    endat = int(math.floor(grid/2)+3*(i+1)-2)
    bonds = np.vstack((bonds, [latt[i][startat], latt[L-(n-i)][9-3*i]]))					
    bonds = np.vstack((bonds, [latt[i][endat], latt[L-(n-i)][1+3*i]]))
bonds = np.delete(bonds, 0,0)

#======================
#==Bond list complete==
#======================
bonds.dump('honey.dat')
